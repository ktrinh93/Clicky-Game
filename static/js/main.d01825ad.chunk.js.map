{"version":3,"sources":["components/Nav/index.js","components/Jumbotron/index.js","components/CardList/index.js","components/Grid/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","currentScore","topScore","Jumbotron","msg","Card","id","src","onClick","alt","Container","_ref","fluid","children","concat","Row","_ref2","Col","_ref3","size","split","map","join","Footer","App","state","cardArray","images","statusMsg","updateGame","event","arr","_this","console","log","key","parseInt","target","i","length","card","clicked","setState","resetGame","shuffle","array","sort","Math","random","this","_this2","components_Nav","components_Jumbotron","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d01825ad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Clicky Game!\n      </a>\n      <span className=\"navbar-text\">\n        Score: {props.currentScore} | Top Score: {props.topScore}\n      </span>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron text-center\">\n      <h1>Clicky Game!</h1>\n      <br/>\n      <span>\n        Click on an image to earn points, but don't click on any more than once!\n      </span>\n      <br/>\n      <br/>\n      <span>\n        {props.msg}\n      </span>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nexport function Card(props) {\n  return (\n    <img className=\"card-img-top\" id={props.id} src={props.src} onClick={props.onClick} alt=\"technology\" />\n  )\n}","import React from \"react\";\nimport \"./style.css\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n\n// Footer component\nexport function Footer(children) {\n  return (\n    <div className=\"footer-copyright text-center py-3\">\n    <a href=\"https://www.github.com/ktrinh93\">See more of my work</a>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Nav from \"./components/Nav\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport { Card } from \"./components/CardList\";\nimport images from \"./images.json\";\nimport { Container, Row, Col, Footer } from \"./components/Grid\";\n\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    cardArray: images,\n    statusMsg: \"\"\n  };\n\n  shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  };\n\n  updateGame = event => {\n    let arr = this.state.cardArray;\n    console.log(arr);\n    // check or update the \"clicked\" flag on the card\n    const key = parseInt(event.target.id);\n    for (let i = 0; i < arr.length; i++) {\n      let card = arr[i];\n      if (card.id === key) {\n        if (card.clicked) {\n          this.setState({\n            statusMsg: \"You already clicked that card. Better luck next time! Score resets!\",\n            topScore: (this.state.currentScore >= this.state.topScore ? this.state.currentScore : this.state.topScore)\n          });\n          this.resetGame();\n        }\n        else {\n          card.clicked = true;\n          this.setState({\n            statusMsg: \"You guessed a new card, nice! Keep going!\",\n            cardArray: arr,\n            currentScore: this.state.currentScore + 1,\n            topScore: (this.state.currentScore + 1 >= this.state.topScore ? this.state.currentScore +1 : this.state.topScore)\n          });\n        }\n      }\n    };\n\n    // shuffle the card array\n    this.shuffle(arr);\n    this.setState({ cardArray: arr });\n  }\n\n  resetGame() {\n    let arr = this.state.cardArray;\n    for(let i = 0; i < arr.length; i++) {\n      arr[i].clicked = false;\n    }\n\n    // resets the current score and the \"clicked\" flags on images\n    this.setState({\n      currentScore: 0,\n      cardArray: arr\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore} />\n        <Jumbotron msg={this.state.statusMsg} />\n        <Container>\n          <Row>\n            <Col size=\"md-12\">\n              {this.state.cardArray.length !== 0 ? (\n                <div>\n                  {this.state.cardArray.map(card => <Card id={card.id} key={card.id} src={card.src} onClick={this.updateGame} />)}\n                </div>\n              ) : (\n                  <h1>No recipes found!</h1>\n                )}\n            </Col>\n          </Row>\n        </Container>\n        <Footer />\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}